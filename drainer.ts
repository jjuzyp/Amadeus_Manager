import { Connection, Keypair, PublicKey, TransactionMessage, VersionedTransaction, SystemProgram, LAMPORTS_PER_SOL } from "@solana/web3.js";
import secret from './key.json';
import bs58 from 'bs58';
import fs from 'fs';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const QUICKNODE_RPC = 'https://mainnet.helius-rpc.com/?api-key=7e808e9e-3c6f-4e49-89d4-5fd3ff44b83a'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à RPC-—É–∑–µ–ª
const SOLANA_CONNECTION = new Connection(QUICKNODE_RPC);

// –ö–æ—à–µ–ª–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ SOL
const DESTINATION_WALLET = new PublicKey('2V12XT7WtYPQNocoYbmaPWdqPxV7d4KyY53CP2Xbtfqw'); // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞

// –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ key.json –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Base58 –≤ Keypair
const WALLETS = secret.map(key => Keypair.fromSecretKey(
    Uint8Array.from(key)
));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
function logToFile(message: string) {
    fs.appendFileSync("log.txt", message + "\n");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–º–∫–∏
function createBox(message: string): string {
    const lines = message.split("\n");
    const maxLength = Math.max(...lines.map(line => line.length));
    const border = "‚ï≠" + "‚îÄ".repeat(maxLength + 2);
    const content = lines.map(line => `‚îÇ ${line}`).join("\n");
    const bottom = "‚ï∞" + "‚îÄ".repeat(maxLength + 2);
    return `${border}\n${content}\n${bottom}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ SOL —Å –∫–æ—à–µ–ª—å–∫–æ–≤
async function collectSOL() {
    for (let i = 0; i < WALLETS.length; i++) {
        const WALLET = WALLETS[i];
        const walletNumber = i + 1;

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        let boxContent = `Processing Wallet ${walletNumber}: ${WALLET.publicKey.toString()}\n`;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            const balance = await SOLANA_CONNECTION.getBalance(WALLET.publicKey);
            const solBalance = balance / LAMPORTS_PER_SOL;

            boxContent += `Balance: ${solBalance} SOL\n`;

            if (solBalance > 0) {
                // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ SOL
                const transferIx = SystemProgram.transfer({
                    fromPubkey: WALLET.publicKey,
                    toPubkey: DESTINATION_WALLET,
                    lamports: balance - 5000, // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ SOL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏
                });

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
                const { blockhash } = await SOLANA_CONNECTION.getLatestBlockhash('finalized');

                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                const messageV0 = new TransactionMessage({
                    payerKey: WALLET.publicKey,
                    recentBlockhash: blockhash,
                    instructions: [transferIx],
                }).compileToV0Message();
                const transaction = new VersionedTransaction(messageV0);
                transaction.sign([WALLET]);

                boxContent += "‚úÖ - Transaction Created and Signed\n";

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                const txid = await SOLANA_CONNECTION.sendTransaction(transaction);
                boxContent += `‚úÖ - Transaction sent: ${txid}\n`;

                // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const confirmation = await confirmTransaction(SOLANA_CONNECTION, txid);
                if (confirmation.err) {
                    throw new Error("‚ùå - Transaction not confirmed.");
                }

                boxContent += 'üî• SUCCESSFUL TRANSFER! üî•\n';
                boxContent += `https://explorer.solana.com/tx/${txid}\n`;
            } else {
                boxContent += 'üü° - No SOL to transfer.\n';
            }
        } catch (error) {
            boxContent += `‚ùå - Error processing Wallet ${walletNumber}: ${error}\n`;
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–∞–º–∫—É
        const box = createBox(boxContent);
        console.log(box);
        logToFile(box);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function confirmTransaction(
    connection: Connection,
    signature: string,
    desiredConfirmationStatus: 'processed' | 'confirmed' | 'finalized' = 'confirmed',
    timeout: number = 30000, // 30 —Å–µ–∫—É–Ω–¥
    pollInterval: number = 1000,
    searchTransactionHistory: boolean = false
): Promise<any> {
    const start = Date.now();

    while (Date.now() - start < timeout) {
        const { value: statuses } = await connection.getSignatureStatuses([signature], { searchTransactionHistory });

        if (!statuses || statuses.length === 0) {
            throw new Error('Failed to get signature status');
        }

        const status = statuses[0];

        if (status === null) {
            await new Promise(resolve => setTimeout(resolve, pollInterval));
            continue;
        }

        if (status.err) {
            throw new Error(`Transaction failed: ${JSON.stringify(status.err)}`);
        }

        if (status.confirmationStatus && status.confirmationStatus === desiredConfirmationStatus) {
            return status;
        }

        if (status.confirmationStatus === 'finalized') {
            return status;
        }

        await new Promise(resolve => setTimeout(resolve, pollInterval));
    }

    throw new Error(`Transaction confirmation timeout after ${timeout}ms`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(async () => {
    console.log("Starting SOL collection...");
    logToFile("Starting SOL collection...");

    await collectSOL(); // –°–æ–±–∏—Ä–∞–µ–º SOL —Å–æ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤

    console.log("SOL collection completed.");
    logToFile("SOL collection completed.");
})();